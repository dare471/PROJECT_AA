import * as React from 'react';
import { Rect } from './useRect';
declare type ScrollAlignment = 'start' | 'center' | 'end' | 'auto';
interface ScrollToOptions {
    align: ScrollAlignment;
}
interface ScrollToOffsetOptions extends ScrollToOptions {
}
interface ScrollToIndexOptions extends ScrollToOptions {
}
export interface Range {
    start: number;
    end: number;
    overscan: number;
    size: number;
}
export declare const defaultRangeExtractor: (range: Range) => number[];
declare type Key = number | string;
interface Item {
    key: Key;
    index: number;
    start: number;
    end: number;
    size: number;
}
export interface VirtualItem extends Item {
    measureRef: (el: HTMLElement | null) => void;
}
export interface Options<T> {
    size: number;
    parentRef: React.RefObject<T>;
    estimateSize?: (index: number) => number;
    overscan?: number;
    horizontal?: boolean;
    scrollToFn?: (offset: number, defaultScrollToFn?: (offset: number) => void) => void;
    paddingStart?: number;
    paddingEnd?: number;
    useObserver?: (ref: React.RefObject<T>, initialRect?: Rect) => Rect;
    initialRect?: Rect;
    keyExtractor?: (index: number) => Key;
    onScrollElement?: React.RefObject<HTMLElement>;
    scrollOffsetFn?: (event?: Event) => number;
    rangeExtractor?: (range: Range) => number[];
    measureSize?: (el: HTMLElement, horizontal: boolean) => number;
}
export declare const useVirtual: <T extends HTMLElement>({ size, estimateSize, overscan, paddingStart, paddingEnd, parentRef, horizontal, scrollToFn, useObserver, initialRect, onScrollElement, scrollOffsetFn, keyExtractor, measureSize, rangeExtractor, }: Options<T>) => {
    virtualItems: VirtualItem[];
    totalSize: number;
    scrollToOffset: (toOffset: number, { align }?: ScrollToOffsetOptions) => void;
    scrollToIndex: (index: number, options?: ScrollToIndexOptions | undefined) => void;
    measure: () => void;
};
export {};
