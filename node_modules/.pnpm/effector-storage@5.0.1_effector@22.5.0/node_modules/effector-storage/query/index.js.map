{"version":3,"file":"index.js","sources":["../../src/query/adapter.ts","../../src/query/index.ts"],"sourcesContent":["import type { StorageAdapter } from '..'\n\nexport type ChangeMethod = (\n  params: URLSearchParams | string,\n  erase?: boolean\n) => void\n\nexport type StateBehavior = 'keep' | 'erase'\n\nexport interface QueryConfig {\n  method?: ChangeMethod\n  state?: StateBehavior\n}\n\nconst keyArea = Symbol() // eslint-disable-line symbol-description\n\n/*\n * Location change methods list\n */\n\nconst url = (params: URLSearchParams | string) =>\n  location.pathname +\n  (params + '' ? '?' + params : '') +\n  (location.hash && location.hash !== '#' ? location.hash : '')\n\nexport const pushState: ChangeMethod = (params, erase): void =>\n  history.pushState(erase ? null : history.state, '', url(params))\n\nexport const replaceState: ChangeMethod = (params, erase): void =>\n  history.replaceState(erase ? null : history.state, '', url(params))\n\nexport const locationAssign: ChangeMethod = (params): void =>\n  location.assign(url(params))\n\nexport const locationReplace: ChangeMethod = (params): void =>\n  location.replace(url(params))\n\n/**\n * Query string adapter factory\n */\nexport function query(\n  { method = pushState, state }: QueryConfig,\n  def: any\n): StorageAdapter {\n  const adapter: StorageAdapter = <State>(\n    key: string,\n    update: (raw?: any) => any\n  ) => {\n    if (typeof addEventListener !== 'undefined') {\n      addEventListener('popstate', () => setTimeout(update, 0))\n    }\n\n    return {\n      get() {\n        const params = new URLSearchParams(location.search)\n        return params.get(key) || def\n      },\n\n      set(value: State) {\n        const params = new URLSearchParams(location.search)\n        if (value != null) {\n          params.set(key, `${value}`)\n        } else {\n          params.delete(key)\n        }\n        method(params, state === 'erase')\n      },\n    }\n  }\n\n  adapter.keyArea = keyArea\n  return adapter\n}\n","import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigCommon,\n  ConfigJustStore,\n  ConfigJustSourceTarget,\n} from '../types'\nimport type { ChangeMethod, StateBehavior } from './adapter'\nimport { persist as base } from '../persist'\nimport { nil } from '../nil'\nimport { query } from './adapter'\n\nexport type { Done, Fail, Finally, StorageAdapter } from '../types'\nexport {\n  pushState,\n  replaceState,\n  locationAssign,\n  locationReplace,\n} from './adapter'\n\nexport interface ConfigPersist extends BaseConfigPersist {\n  method?: ChangeMethod\n  state?: StateBehavior\n}\n\nexport interface AdapterConfig {\n  method?: ChangeMethod\n  state?: StateBehavior\n  def?: any\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustStore<State> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustSourceTarget<State> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `query` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) => {\n    const def =\n      config.def !== undefined\n        ? config.def\n        : 'store' in config\n        ? config.store.defaultState\n        : null\n\n    return base({\n      adapter:\n        typeof history !== 'undefined' && typeof location !== 'undefined'\n          ? query({ ...defaults, ...config }, def)\n          : nil('query'),\n      ...defaults,\n      ...config,\n    })\n  }\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["keyArea","Symbol","url","params","location","pathname","hash","pushState","erase","history","state","replaceState","locationAssign","assign","locationReplace","replace","query","method","def","adapter","key","update","addEventListener","setTimeout","get","URLSearchParams","search","set","value","delete","createPersist","defaults","config","undefined","store","defaultState","base","nil","persist"],"mappings":"4EAcA,IAAMA,EAAUC,SAMVC,EAAOC,GACXC,SAASC,UACRF,EAAS,GAAK,IAAMA,EAAS,KAC7BC,SAASE,MAA0B,MAAlBF,SAASE,KAAeF,SAASE,KAAO,IAE/CC,EAA0B,CAACJ,EAAQK,IAC9CC,QAAQF,UAAUC,EAAQ,KAAOC,QAAQC,MAAO,GAAIR,EAAIC,IAE7CQ,EAA6B,CAACR,EAAQK,IACjDC,QAAQE,aAAaH,EAAQ,KAAOC,QAAQC,MAAO,GAAIR,EAAIC,IAEhDS,EAAgCT,GAC3CC,SAASS,OAAOX,EAAIC,IAETW,EAAiCX,GAC5CC,SAASW,QAAQb,EAAIC,IAKhB,SAASa,GACdC,OAAEA,EAASV,EAAXG,MAAsBA,GACtBQ,GAEA,IAAMC,EAA0B,CAC9BC,EACAC,KAEgC,oBAArBC,kBACTA,iBAAiB,YAAY,IAAMC,WAAWF,EAAQ,KAGjD,CACLG,IAAG,IACc,IAAIC,gBAAgBrB,SAASsB,QAC9BF,IAAIJ,IAAQF,EAG5BS,IAAIC,GACF,IAAMzB,EAAS,IAAIsB,gBAAgBrB,SAASsB,QAC/B,MAATE,EACFzB,EAAOwB,IAAIP,EAAM,GAAEQ,KAEnBzB,EAAO0B,OAAOT,GAEhBH,EAAOd,EAAkB,UAAVO,EAChB,IAKL,OADAS,EAAQnB,QAAUA,EACXmB,CACR,CCtBM,SAASW,EAAcC,GAC5B,OAAQC,IACN,IAAMd,OACWe,IAAfD,EAAOd,IACHc,EAAOd,IACP,UAAWc,EACXA,EAAOE,MAAMC,aACb,KAEN,OAAOC,EAAK,CACVjB,QACqB,oBAAZV,SAA+C,oBAAbL,SACrCY,EAAM,IAAKe,KAAaC,GAAUd,GAClCmB,EAAI,YACPN,KACAC,GANL,CASH,CAKYM,IAAAA,EAAUR"}