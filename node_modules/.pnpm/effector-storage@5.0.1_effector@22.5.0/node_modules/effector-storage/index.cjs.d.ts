import { Subscription, Unit, Store, Event, Effect } from 'effector'

interface StorageAdapter {
  <State>(key: string, update: (raw?: any) => any): {
    set(value: State): void
    get(value?: any): State | Promise<State>
  }
  keyArea?: any
}
declare type Done<State> = {
  key: string
  keyPrefix: string
  operation: 'set' | 'get'
  value: State
}
declare type Fail<Err> = {
  key: string
  keyPrefix: string
  operation: 'set' | 'get'
  error: Err
  value?: any
}
declare type Finally<State, Err> =
  | (Done<State> & {
      status: 'done'
    })
  | (Fail<Err> & {
      status: 'fail'
    })
interface ConfigPersist {
  keyPrefix?: string
}
interface ConfigAdapter {
  adapter: StorageAdapter
}
interface ConfigCommon<State, Err = Error> {
  clock?: Unit<any>
  done?: Unit<Done<State>>
  fail?: Unit<Fail<Err>>
  finally?: Unit<Finally<State, Err>>
  pickup?: Unit<any>
  key?: string
  keyPrefix?: string
}
interface ConfigJustStore<State> {
  store: Store<State>
}
interface ConfigJustSourceTarget<State> {
  source: Store<State> | Event<State> | Effect<State, any, any>
  target: Store<State> | Event<State> | Effect<State, any, any>
}
interface ConfigStore<State, Err = Error>
  extends ConfigAdapter,
    ConfigCommon<State, Err>,
    ConfigJustStore<State> {}
interface ConfigSourceTarget<State, Err = Error>
  extends ConfigAdapter,
    ConfigCommon<State, Err>,
    ConfigJustSourceTarget<State> {}
interface Persist {
  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription
  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription
}

/**
 * Creates custom `persist`
 */
declare function createPersist(defaults?: ConfigPersist): Persist
/**
 * Default `persist`
 */
declare const persist: Persist

export {
  ConfigPersist,
  ConfigSourceTarget,
  ConfigStore,
  Done,
  Fail,
  Finally,
  Persist,
  StorageAdapter,
  createPersist,
  persist,
}
