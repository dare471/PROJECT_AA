{"version":3,"file":"index.cjs","sources":["../../src/session/index.ts"],"sourcesContent":["import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigCommon,\n  ConfigJustStore,\n  ConfigJustSourceTarget,\n} from '../types'\nimport { persist as base } from '../persist'\nimport { nil } from '../nil'\nimport { storage } from '../storage'\n\nexport type { Done, Fail, Finally, StorageAdapter } from '../types'\n\nexport interface ConfigPersist extends BaseConfigPersist {\n  sync?: boolean\n}\n\nexport interface AdapterConfig {\n  sync?: boolean\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustStore<State> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustSourceTarget<State> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Function, checking if `sessionStorage` exists and accessible\n */\nfunction supports() {\n  try {\n    return typeof sessionStorage !== 'undefined'\n  } catch (error) {\n    return false // should somehow return error instance?\n  }\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `sessionStorage` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: supports()\n        ? storage({\n            storage: sessionStorage,\n            ...defaults,\n            ...config,\n          })\n        : nil('session'),\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["supports","sessionStorage","error","createPersist","defaults","config","base","adapter","storage","nil","persist"],"mappings":"2GAyCA,SAASA,IACP,IACE,MAAiC,oBAAnBC,cAGf,CAFC,MAAOC,GACP,OAAO,CACR,CACF,CAMM,SAASC,EAAcC,GAC5B,OAAQC,GACNC,EAAAA,QAAK,CACHC,QAASP,IACLQ,UAAQ,CACNA,QAASP,kBACNG,KACAC,IAELI,EAAGA,IAAC,cACLL,KACAC,GAER,CAKYK,IAAAA,EAAUP"}