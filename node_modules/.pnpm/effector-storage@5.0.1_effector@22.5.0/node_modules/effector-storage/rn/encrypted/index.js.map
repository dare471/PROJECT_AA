{"version":3,"file":"index.js","sources":["../../../src/rn/encrypted/index.ts"],"sourcesContent":["import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigCommon,\n  ConfigJustStore,\n  ConfigJustSourceTarget,\n} from '../../types'\nimport { persist as base } from '../../persist'\nimport { asyncStorage } from '../../async-storage'\nimport EncryptedStorage from 'react-native-encrypted-storage'\n\nexport type { Done, Fail, Finally, StorageAdapter } from '../../types'\n\nexport interface ConfigPersist extends BaseConfigPersist {}\n\nexport interface AdapterConfig {\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustStore<State> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustSourceTarget<State> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `EncryptedStorage` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: asyncStorage({\n        storage: EncryptedStorage,\n        ...defaults,\n        ...config,\n      }),\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["createPersist","defaults","config","base","adapter","asyncStorage","storage","EncryptedStorage","persist"],"mappings":"mJAuCO,SAASA,EAAcC,GAC5B,OAAQC,GACNC,EAAK,CACHC,QAASC,EAAa,CACpBC,QAASC,KACNN,KACAC,OAEFD,KACAC,GAER,CAKYM,IAAAA,EAAUR"}