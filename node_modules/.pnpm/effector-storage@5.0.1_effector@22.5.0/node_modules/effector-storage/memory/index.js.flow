/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.1
 * @flow
 */

import { Unit, Store, Event, Effect, Subscription } from 'effector'
declare interface StorageAdapter {
  <State>(
    key: string,
    update: (raw?: any) => any
  ): {
    set(value: State): void,
    get(value?: any): State | Promise<State>,
    ...
  };
  keyArea?: any;
}
declare type Done<State> = {
  key: string,
  keyPrefix: string,
  operation: 'set' | 'get',
  value: State,
  ...
}
declare type Fail<Err> = {
  key: string,
  keyPrefix: string,
  operation: 'set' | 'get',
  error: Err,
  value?: any,
  ...
}
declare type Finally<State, Err> =
  | {
      ...Done<State>,
      ...{
        status: 'done',
        ...
      },
    }
  | {
      ...Fail<Err>,
      ...{
        status: 'fail',
        ...
      },
    }
declare interface ConfigPersist {
  keyPrefix?: string;
}
declare interface ConfigCommon<State, Err = Error> {
  clock?: Unit<any>;
  done?: Unit<Done<State>>;
  fail?: Unit<Fail<Err>>;
  finally?: Unit<Finally<State, Err>>;
  pickup?: Unit<any>;
  key?: string;
  keyPrefix?: string;
}
declare interface ConfigJustStore<State> {
  store: Store<State>;
}
declare interface ConfigJustSourceTarget<State> {
  source: Store<State> | Event<State> | Effect<State, any, any>;
  target: Store<State> | Event<State> | Effect<State, any, any>;
}
declare type ConfigStore<State, Err = Error> = { ... } & ConfigCommon<
  State,
  Err
> &
  ConfigJustStore<State>
declare type ConfigSourceTarget<State, Err = Error> = { ... } & ConfigCommon<
  State,
  Err
> &
  ConfigJustSourceTarget<State>
declare interface Persist {
  <State, Err>(config: ConfigSourceTarget<State, Err>): Subscription;
  <State, Err>(config: ConfigStore<State, Err>): Subscription;
}
declare function createPersist(defaults?: ConfigPersist): Persist
declare var persist: Persist
declare export {
  ConfigPersist,
  ConfigSourceTarget,
  ConfigStore,
  Done,
  Fail,
  Finally,
  Persist,
  StorageAdapter,
  createPersist,
  persist,
}
