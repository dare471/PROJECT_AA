{"version":3,"file":"index.cjs","sources":["../../src/memory/adapter.ts","../../src/memory/index.ts"],"sourcesContent":["import type { StorageAdapter } from '..'\n\nconst data = new Map<string, any>()\n\nexport const memory: StorageAdapter = <State>(key: string) => ({\n  get: () => data.get(key),\n  set: (value: State) => data.set(key, value),\n})\n","import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist,\n  ConfigCommon,\n  ConfigJustStore,\n  ConfigJustSourceTarget,\n} from '../types'\nimport { persist as base } from '../persist'\nimport { memory } from './adapter'\n\nexport type {\n  ConfigPersist,\n  Done,\n  Fail,\n  Finally,\n  StorageAdapter,\n} from '../types'\n\nexport interface ConfigStore<State, Err = Error>\n  extends ConfigCommon<State, Err>,\n    ConfigJustStore<State> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends ConfigCommon<State, Err>,\n    ConfigJustSourceTarget<State> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `memory` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: memory,\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["data","Map","memory","key","get","set","value","createPersist","defaults","config","base","adapter","persist"],"mappings":"2CAEMA,EAAO,IAAIC,IAEJC,EAAiCC,IAAiB,CAC7DC,IAAK,IAAMJ,EAAKI,IAAID,GACpBE,IAAMC,GAAiBN,EAAKK,IAAIF,EAAKG,KC6BhC,SAASC,EAAcC,GAC5B,OAAQC,GACNC,EAAAA,QAAK,CACHC,QAAST,KACNM,KACAC,GAER,CAKYG,IAAAA,EAAUL"}