{"version":3,"file":"effector-react.cjs.js","sources":["effector-react/createWatch.ts","effector-react/withDisplayName.ts","effector-react/apiBase.ts","effector-react/scope.ts","effector-react/nossr.ts","effector-react/createComponent.ts","effector-react/../effector/config.ts","effector-react/../effector/is.ts","effector-react/../effector/throw.ts","effector-react/createGate.ts","effector-react/throw.ts","effector-react/useIsomorphicLayoutEffect.ts","effector-react/deprecate.ts","effector-react/connect.ts","effector-react/../effector/collection.ts","effector-react/createContextComponent.ts","effector-react/createReactState.ts","effector-react/createStoreConsumer.ts"],"sourcesContent":["import {Store, clearNode, step, createNode, Scope, Node, Cmd} from 'effector'\n\nexport function createWatch<T>(\n  store: Store<T>,\n  fn: (value: T) => any,\n  scope?: Scope,\n  batchStep?: Cmd,\n) {\n  const seq: Cmd[] = [step.run({fn: value => fn(value)})]\n  if (batchStep) seq.unshift(batchStep)\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (store as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return () => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    }\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [store],\n      family: {owners: store},\n    })\n    return () => {\n      clearNode(node)\n    }\n  }\n}\n","export function withDisplayName(name: string, Component: any) {\n  Component.displayName = name\n  return Component\n}\n","import {Store, is, step, scopeBind, Scope, Unit, Event} from 'effector'\nimport React from 'react'\nimport {useSyncExternalStore} from 'use-sync-external-store/shim'\nimport {useSyncExternalStoreWithSelector} from 'use-sync-external-store/shim/with-selector'\nimport {throwError} from './throw'\nimport {createWatch} from './createWatch'\nimport {withDisplayName} from './withDisplayName'\n\nconst stateReader = <T>(store: Store<T>, scope?: Scope) =>\n  scope ? scope.getState(store) : store.getState()\nconst basicUpdateFilter = <T>(upd: T, oldValue: T) => upd !== oldValue\nconst keysEqual = (a?: readonly any[], b?: readonly any[]) => {\n  if (!a || !b || a.length !== b.length) return false\n\n  let isEqual = true\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      isEqual = false\n      break\n    }\n  }\n\n  return isEqual\n}\n\nexport function useStoreBase<State>(store: Store<State>, scope?: Scope) {\n  if (!is.store(store)) throwError('expect useStore argument to be a store')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n  const currentValue = useSyncExternalStore(subscribe, read, read)\n\n  return currentValue\n}\n\nexport function useUnitBase<Shape extends {[key: string]: Unit<any>}>(\n  shape: Shape | {'@@unitShape': () => Shape},\n  scope?: Scope,\n) {\n  const isSingleUnit = is.unit(shape)\n  let normShape: {[key: string]: Unit<any>} = {}\n  if (isSingleUnit) {\n    normShape = {unit: shape}\n  } else if ('@@unitShape' in shape) {\n    if (typeof shape['@@unitShape'] === 'function') {\n      normShape = shape['@@unitShape']()\n    } else {\n      throwError('expect @@unitShape to be a function')\n    }\n  } else {\n    normShape = shape\n  }\n  const isList = Array.isArray(normShape)\n  const flagsRef = React.useRef({\n    stale: true,\n    justSubscribed: false,\n    scope,\n  })\n  const [eventsShape, storeKeys, storeValues] = React.useMemo(() => {\n    flagsRef.current.stale = true\n    const shape = Array.isArray(normShape) ? [] : ({} as any)\n    const storeKeys: string[] = []\n    const storeValues: Array<Store<any>> = []\n    for (const key in normShape) {\n      const unit = normShape[key]\n      if (!is.unit(unit)) throwError('expect useUnit argument to be a unit')\n      if (is.event(unit) || is.effect(unit)) {\n        shape[key] = scope ? scopeBind(unit as Event<any>, {scope}) : unit\n      } else {\n        shape[key] = null\n        storeKeys.push(key)\n        storeValues.push(unit as Store<any>)\n      }\n    }\n    return [shape, storeKeys, storeValues]\n  }, [flagsRef, scope, ...Object.keys(normShape), ...Object.values(normShape)])\n  const stateRef = React.useRef({value: eventsShape, storeKeys})\n  const subscribe = React.useCallback(\n    (cb: () => void) => {\n      const flags = flagsRef.current\n      flags.justSubscribed = true\n      const cbCaller = () => {\n        if (!flags.stale) {\n          flags.stale = true\n          cb()\n        }\n      }\n      const batchStep = step.compute({priority: 'sampler', batch: true})\n      const subs = storeValues.map(store =>\n        createWatch(store, cbCaller, scope, batchStep),\n      )\n      return () => {\n        subs.forEach(fn => fn())\n      }\n    },\n    [storeValues, scope, stateRef, flagsRef],\n  )\n  const read = React.useCallback(() => {\n    const state = stateRef.current\n    const flags = flagsRef.current\n    let resultValue\n    let changed = false\n    const oldVal = state.value\n    const oldKeys = state.storeKeys\n    const scopeChanged = scope !== flags.scope\n    if (\n      (storeKeys.length > 0 || oldKeys.length > 0) &&\n      (flags.stale || flags.justSubscribed || scopeChanged)\n    ) {\n      changed = !flags.justSubscribed || scopeChanged\n      resultValue = isList ? [...eventsShape] : {...eventsShape}\n      if (oldKeys.length !== storeKeys.length) {\n        changed = true\n      }\n      for (let i = 0; i < storeKeys.length; i++) {\n        const updatedValue = stateReader(storeValues[i], scope)\n        const key = storeKeys[i]\n        if (!changed) {\n          if (!oldKeys.includes(key)) {\n            changed = true\n          } else {\n            changed = oldVal[key] !== updatedValue\n          }\n        }\n        resultValue[key] = updatedValue\n      }\n    }\n    if (changed) {\n      state.value = resultValue\n    }\n    state.storeKeys = storeKeys\n    flags.stale = false\n    flags.justSubscribed = !changed\n    flags.scope = scope\n    return isSingleUnit ? state.value.unit : state.value\n  }, [subscribe, storeValues, scope, stateRef, flagsRef])\n  return useSyncExternalStore(subscribe, read, read)\n}\n\nexport function useStoreMapBase<State, Result, Keys extends ReadonlyArray<any>>(\n  [configOrStore, separateFn]: [\n    configOrStore:\n      | {\n          store: Store<State>\n          keys: Keys\n          fn(state: State, keys: Keys): Result\n          updateFilter?: (update: Result, current: Result) => boolean\n          defaultValue?: Result\n        }\n      | Store<State>,\n    separateFn?: (state: State, keys: Keys) => Result,\n  ],\n  scope?: Scope,\n): Result {\n  let fn: (state: State, keys: Keys) => Result\n  let updateFilter: (update: Result, current: Result) => boolean =\n    basicUpdateFilter\n  let defaultValue: Result | undefined\n  let store: Store<State>\n  let keys: Keys\n  if (separateFn) {\n    fn = separateFn\n    store = configOrStore as Store<State>\n    keys = [] as unknown as Keys\n  } else {\n    ;({\n      fn,\n      store,\n      keys,\n      defaultValue,\n      updateFilter = basicUpdateFilter,\n    } = configOrStore as any)\n  }\n  if (!is.store(store)) throwError('useStoreMap expects a store')\n  if (!Array.isArray(keys)) throwError('useStoreMap expects an array as keys')\n  if (typeof fn !== 'function') throwError('useStoreMap expects a function')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n\n  const stateRef = React.useRef<State>()\n  const valueRef = React.useRef<Result>()\n  const keysRef = React.useRef(keys)\n\n  const value = useSyncExternalStoreWithSelector(\n    subscribe,\n    read,\n    read,\n    state => {\n      if (stateRef.current !== state || !keysEqual(keysRef.current, keys)) {\n        let result = fn(state, keys)\n        if (result === undefined && defaultValue !== undefined) {\n          result = defaultValue\n        }\n        stateRef.current = state\n        keysRef.current = keys\n\n        /**\n         * skip update, if undefined\n         * just like original store or previous implementation\n         */\n        if (result !== undefined) {\n          valueRef.current = result\n        }\n      }\n\n      return valueRef.current as Result\n    },\n    (current, update) => !updateFilter(update, current),\n  )\n\n  return value\n}\nexport function useListBase<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n        getKey?: (item: T) => string\n        placeholder?: React.ReactNode\n      }\n    | ((item: T, index: number) => React.ReactNode),\n  scope?: Scope,\n): React.ReactNode {\n  let keys = [] as any[]\n  let fn\n  let getKey: ((item: T) => string) | void\n  let placeholder: React.ReactNode | void\n  if (typeof renderItem === 'object' && renderItem !== null) {\n    if (renderItem.keys) keys = renderItem.keys\n    ;({fn, getKey, placeholder} = renderItem)\n  } else {\n    fn = renderItem\n  }\n  if (!is.store(list)) throwError('expect useList first argument to be a store')\n  if (typeof fn !== 'function')\n    throwError(\"expect useList's renderItem to be a function\")\n  if (!Array.isArray(keys)) throwError(\"expect useList's keys to be an array\")\n  const Item = React.useMemo(() => {\n    const Item = withDisplayName(\n      `${list.shortName || 'Unknown'}.Item`,\n      (\n        props:\n          | {index: number; keys: any[]; keyVal: never; value: never}\n          | {index: never; keys: any[]; keyVal: string; value: T},\n      ) => {\n        const {index, keys, keyVal, value} = props\n        const isKeyed = !!fnRef.current[1]\n        if (isKeyed) {\n          return fnRef.current[0](value, keyVal as any)\n        }\n        const item = useStoreMapBase(\n          [\n            {\n              store: list,\n              keys: [index, ...keys],\n              fn: (list, keys) => list[keys[0]],\n            },\n          ],\n          scope,\n        )\n        return fnRef.current[0](item, index)\n      },\n    )\n    return React.memo(Item)\n  }, [list, scope, !!getKey!])\n  const fnRef = React.useRef([fn, getKey!] as const)\n  fnRef.current = [fn, getKey!]\n  const keysSelfMemo = React.useMemo(() => keys, keys)\n  if (getKey!) {\n    const listItems = useStoreBase(list, scope)\n    if (listItems.length === 0 && placeholder) return placeholder\n    return listItems.map(value => {\n      const key = fnRef.current[1](value)\n      return React.createElement(Item, {\n        keyVal: key,\n        key,\n        keys: keysSelfMemo,\n        value,\n      })\n    })\n  } else {\n    const length = useStoreMapBase(\n      [\n        {\n          store: list,\n          keys: [list],\n          fn: list => list.length,\n        },\n      ],\n      scope,\n    )\n    if (length === 0 && placeholder) return placeholder\n    return Array.from({length}, (_, i) =>\n      React.createElement(Item, {\n        index: i,\n        key: i,\n        keys: keysSelfMemo,\n      }),\n    )\n  }\n}\n\nexport function useEventBase(eventObject: any, scope?: Scope) {\n  if (!scope) {\n    return eventObject\n  }\n  const isShape = !is.unit(eventObject) && typeof eventObject === 'object'\n  const events = isShape ? eventObject : {event: eventObject}\n\n  return React.useMemo(() => {\n    if (is.unit(eventObject)) {\n      //@ts-expect-error\n      return scopeBind(eventObject, {scope})\n    }\n    const shape = Array.isArray(eventObject) ? [] : ({} as any)\n    for (const key in eventObject) {\n      shape[key] = scopeBind(eventObject[key], {scope})\n    }\n    return shape\n  }, [scope, ...Object.keys(events), ...Object.values(events)])\n}\n","import React from 'react'\nimport {Scope} from 'effector'\nimport {throwError} from './throw'\n\nconst ScopeContext = React.createContext(null as Scope | null)\nexport const {Provider} = ScopeContext\nexport function getScope(forceScope?: boolean) {\n  const scope = React.useContext(ScopeContext)\n  if (forceScope && !scope)\n    throwError('No scope found, consider adding <Provider> to app root')\n  return scope as Scope\n}\n","import {Event, Store} from 'effector'\nimport {\n  useStoreBase,\n  useStoreMapBase,\n  useListBase,\n  useUnitBase,\n  useEventBase,\n} from './apiBase'\nimport {getScope} from './scope'\n\n/**\nbind event to scope\n\nworks like React.useCallback, but for scopes\n*/\nexport function useEvent<T>(\n  event: Event<T>,\n  opts?: {forceScope?: boolean},\n): (payload: T) => T {\n  const scope = getScope(opts?.forceScope)\n\n  return useEventBase(event, scope)\n}\n\nexport function useStore<State>(\n  store: Store<State>,\n  opts?: {forceScope?: boolean},\n): State {\n  return useStoreBase(store, getScope(opts?.forceScope))\n}\n\nexport function useUnit(shape, opts?: {forceScope?: boolean}) {\n  return useUnitBase(shape, getScope(opts?.forceScope))\n}\n\nexport function useStoreMap<State, Result, Keys extends ReadonlyArray<any>>(\n  configOrStore:\n    | {\n        store: Store<State>\n        keys: Keys\n        fn(state: State, keys: Keys): Result\n        updateFilter?: (update: Result, current: Result) => boolean\n        defaultValue?: Result\n        forceScope?: boolean\n      }\n    | Store<State>,\n  separateFn?: (state: State, keys: Keys) => Result,\n): Result {\n  return useStoreMapBase(\n    [configOrStore, separateFn],\n    getScope(configOrStore?.forceScope),\n  )\n}\n\nexport function useList<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n        getKey?: (item: T) => string\n        placeholder?: React.ReactNode\n      }\n    | ((item: T, index: number) => React.ReactNode),\n  opts?: {forceScope?: boolean},\n): React.ReactNode {\n  return useListBase(list, renderItem, getScope(opts?.forceScope))\n}\n","import React from 'react'\nimport {Store, is, combine, createEvent} from 'effector'\nimport {useStore} from './nossr'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {StoreView} from './index.h'\nimport {withDisplayName} from './withDisplayName'\nimport {throwError} from './throw'\n\nexport function createComponent<Props, State>(\n  shape: Store<State> | {[key: string]: Store<any> | any},\n  renderProp: (props: Props, state: State) => React.ReactNode,\n): StoreView<State, Props> {\n  let store: Store<any>\n  if (is.store(shape)) {\n    store = shape\n  } else {\n    if (typeof shape === 'object' && shape !== null) {\n      store = combine(shape)\n    } else throwError('shape should be a store or object with stores')\n  }\n  let storeName = 'Unknown'\n  //@ts-ignore\n  if (store && store.shortName) {\n    storeName = store.shortName\n  }\n  const mounted = createEvent<any>()\n  const unmounted = createEvent<any>()\n\n  function RenderComponent(props: Props) {\n    const propsRef = React.useRef(props)\n    const state = useStore(store)\n    useIsomorphicLayoutEffect(() => {\n      mounted({props: propsRef.current, state: store.getState()})\n      return () => {\n        unmounted({props: propsRef.current, state: store.getState()})\n      }\n    }, [])\n    const result = renderProp(props, state)\n    propsRef.current = props\n    return result\n  }\n  RenderComponent.mounted = mounted\n  RenderComponent.unmounted = unmounted\n  return withDisplayName(`${storeName}.View`, RenderComponent)\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import React from 'react'\nimport {createStore, launch, Store, Domain, createEvent} from 'effector'\nimport {Gate} from './index.h'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {withDisplayName} from './withDisplayName'\nimport {flattenConfig, processArgsToConfig} from '../effector/config'\nimport {isObject} from '../effector/is'\n\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  const propsRef = React.useRef<{value: any; count: number}>({\n    value: null,\n    count: 0,\n  })\n  useIsomorphicLayoutEffect(() => {\n    GateComponent.open(propsRef.current.value)\n    return () => GateComponent.close(propsRef.current.value) as any\n  }, [GateComponent])\n  if (!shallowCompare(propsRef.current.value, props)) {\n    propsRef.current.value = props\n    propsRef.current.count += 1\n  }\n  useIsomorphicLayoutEffect(() => {\n    GateComponent.set(propsRef.current.value)\n  }, [propsRef.current.count])\n}\n\nfunction shallowCompare(a: any, b: any) {\n  if (a === b) return true\n  if (\n    typeof a === 'object' &&\n    a !== null &&\n    typeof b === 'object' &&\n    b !== null\n  ) {\n    const aKeys = Object.keys(a)\n    const bKeys = Object.keys(b)\n    if (aKeys.length !== bKeys.length) return false\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i]\n      if (a[key] !== b[key]) return false\n    }\n    return true\n  }\n  return false\n}\nexport function createGateImplementation<State>({\n  domain,\n  defaultState,\n  hook: useGateHook,\n  mainConfig,\n  maybeConfig,\n}: {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGate\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n}): Gate<State> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: mainConfig,\n  }) as {sid: string | undefined; name: string | undefined}\n  const name = config.name || 'gate'\n  const fullName = `${domain ? `${domain.compositeName.fullName}/` : ''}${name}`\n  const set = createEvent<State>({\n    name: `${fullName}.set`,\n    sid: config.sid ? `${config.sid}|set` : undefined,\n  })\n  const open = createEvent<State>({\n    name: `${fullName}.open`,\n    sid: config.sid ? `${config.sid}|open` : undefined,\n  })\n  const close = createEvent<State>({\n    name: `${fullName}.close`,\n    sid: config.sid ? `${config.sid}|close` : undefined,\n  })\n  const status = createStore(Boolean(false), {\n    name: `${fullName}.status`,\n    serialize: 'ignore',\n    // doesn't need to have sid, because it is internal store, should not be serialized\n  })\n    .on(open, () => Boolean(true))\n    .on(close, () => Boolean(false))\n  const state = createStore(defaultState as State, {\n    name: `${fullName}.state`,\n    sid: config.sid,\n  })\n    .on(set, (_, state) => state)\n    .on(open, (_, state) => state)\n    .reset(close)\n  if (domain) {\n    const {hooks} = domain as any\n    launch({\n      target: [\n        hooks.store,\n        hooks.store,\n        hooks.event,\n        hooks.event,\n        hooks.event,\n      ] as any,\n      params: [status, state, open, close, set],\n    })\n  }\n  function GateComponent(props: State) {\n    useGateHook(GateComponent as any, props)\n    return null\n  }\n  GateComponent.open = open\n  GateComponent.close = close\n  GateComponent.status = status\n  GateComponent.state = state\n  GateComponent.set = set\n  return withDisplayName(`Gate:${fullName}`, GateComponent)\n}\n\nconst isPluginConfig = (config: Record<string, any> | string) =>\n  isObject(config) && 'sid' in config\n\nconst isGateConfig = (config: Record<string, any> | string) =>\n  isObject(config) &&\n  ('domain' in config || 'defaultState' in config || 'name' in config)\n\nconst isStructuredConfig = (arg: unknown) =>\n  isObject(arg) && (arg.and || arg.or)\n\nexport function processCreateGateConfig<State>(\n  hook: typeof useGate,\n  args: unknown[],\n): {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGate\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n} {\n  const universalConfig =\n    args && isStructuredConfig(args[0]) ? args : [{and: args}]\n  const [[nameOrConfig, defaultStateOrConfig], metadata] =\n    processArgsToConfig(universalConfig)\n\n  let domain\n  let defaultState = {}\n  let mainConfig = {}\n  let maybeConfig = metadata\n\n  if (typeof nameOrConfig === 'string') {\n    mainConfig = {name: nameOrConfig}\n    if (isPluginConfig(defaultStateOrConfig)) {\n      // maybeConfig = defaultStateOrConfig\n    } else {\n      defaultState = defaultStateOrConfig || {}\n    }\n  } else if (isGateConfig(nameOrConfig)) {\n    mainConfig = nameOrConfig\n    defaultState = nameOrConfig.defaultState || {}\n    domain = nameOrConfig.domain\n  }\n  return {\n    hook,\n    domain,\n    defaultState,\n    mainConfig,\n    maybeConfig,\n  }\n}\n\nexport function createGate<Props>(...args: unknown[]): Gate<Props> {\n  return createGateImplementation<Props>(processCreateGateConfig(useGate, args))\n}\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","import React from 'react'\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","export const deprecate = (method: string) =>\n  console.error(`${method} is deprecated`)\n","import React from 'react'\n\nimport type {Store} from 'effector'\nimport {useStore} from './nossr'\nimport {withDisplayName} from './withDisplayName'\n\nexport const connect =\n  <State>(Component: React.ComponentType<any>) =>\n  (store: Store<State>) => {\n    let View: any = Component\n    if (typeof Component !== 'function') {\n      View = store\n      store = Component as any\n    }\n    const wrappedComponentName = View.displayName || View.name || 'Unknown'\n    return withDisplayName(`Connect(${wrappedComponentName})`, (props: any) =>\n      React.createElement(View, {...props, ...useStore(store)}),\n    )\n  }\n","export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import React from 'react'\nimport type {Store} from 'effector'\nimport {useStore} from './nossr'\nimport {withDisplayName} from './withDisplayName'\nimport {deprecate} from './deprecate'\n\nexport const createContextComponent = <Props, State, Context>(\n  store: Store<State>,\n  context: React.Context<Context>,\n  renderProp: (props: Props, state: State, context: Context) => React.ReactNode,\n): React.ComponentType<Props> => {\n  deprecate('createContextComponent')\n  return withDisplayName(\n    `${store.shortName || 'Unknown'}.ContextComponent`,\n    (props: any) => {\n      const ctx = React.useContext(context)\n      const state = useStore(store)\n      return renderProp(props, state, ctx)\n    },\n  )\n}\n","import type {ComponentType} from 'react'\nimport type {Store} from 'effector'\n\nimport {connect} from './connect'\nimport {deprecate} from './deprecate'\n\nexport const createReactState = (\n  store: Store<any>,\n  View: ComponentType<any>,\n) => {\n  deprecate('createReactState')\n  return connect(View)(store)\n}\n","import {Store} from 'effector'\n\nimport {StoreConsumer} from './index.h'\nimport {createComponent} from './createComponent'\n\nexport function createStoreConsumer<State>(\n  store: Store<State>,\n): StoreConsumer<State> {\n  return createComponent(store, ({children}, state) => children(state))\n}\n"],"names":["createWatch","store","fn","scope","batchStep","seq","step","run","value","unshift","node","createNode","id","graphite","scopeLinks","additionalLinks","links","push","idx","indexOf","splice","clearNode","parent","family","owners","withDisplayName","name","Component","displayName","useStoreBase","is","throwError","subscribe","React","useCallback","cb","read","stateReader","useSyncExternalStore","useStoreMapBase","configOrStore","separateFn","defaultValue","keys","updateFilter","basicUpdateFilter","Array","isArray","stateRef","useRef","valueRef","keysRef","useSyncExternalStoreWithSelector","state","current","a","b","length","isEqual","i","keysEqual","result","undefined","update","getScope","forceScope","useContext","ScopeContext","useStore","opts","createComponent","shape","renderProp","RenderComponent","props","propsRef","useIsomorphicLayoutEffect","mounted","getState","unmounted","combine","storeName","shortName","createEvent","processArgsToConfig","args","singleArgument","rawConfig","condition","Error","assert","isObject","isFunction","metadata","or","childConfig","and","unwrappedNestedValue","nested","useGate","GateComponent","count","open","close","aKeys","Object","bKeys","key","shallowCompare","set","processCreateGateConfig","hook","universalConfig","arg","domain","nameOrConfig","defaultStateOrConfig","defaultState","mainConfig","maybeConfig","config","isGateConfig","message","upd","oldValue","createContext","Provider","window","useLayoutEffect","useEffect","deprecate","method","console","error","connect","View","createElement","flattenConfig","part","obj","field","isVoid","forIn","context","ctx","useGateHook","fullName","compositeName","sid","status","createStore","Boolean","serialize","on","_","reset","hooks","launch","target","event","params","createGateImplementation","children","eventObject","events","unit","useMemo","scopeBind","values","useEventBase","list","renderItem","getKey","placeholder","Item","index","keyVal","fnRef","item","memo","keysSelfMemo","listItems","map","from","useListBase","isSingleUnit","normShape","isList","flagsRef","stale","justSubscribed","eventsShape","storeKeys","storeValues","effect","flags","cbCaller","compute","priority","batch","subs","forEach","resultValue","changed","oldVal","oldKeys","scopeChanged","updatedValue","includes","useUnitBase"],"mappings":"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"}