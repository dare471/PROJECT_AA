{"version":3,"file":"index-eb35ad9d.js","sources":["../../src/entities/client/model/client.ts","../../src/entities/client/model/client-managers.ts","../../src/entities/client/model/client-subsidies.ts","../../src/entities/client/model/client-contracts.ts","../../src/entities/client/model/client-last-contract.ts","../../src/entities/client/ui/contact-badge.tsx","../../src/entities/client/ui/client-contacts.tsx","../../src/entities/client/ui/client-managers.tsx","../../src/entities/client/ui/client-contracts.tsx","../../src/pages/client-profile/model.ts","../../src/pages/client-profile/page.tsx"],"sourcesContent":["import { attach, createStore } from 'effector'\n\nimport { type Client, clientApi } from '~src/shared/api'\n\nexport function createClient() {\n\tconst $client = createStore<Client | null>(null)\n\tconst $contacts = $client.map((client) => (client ? client.clientContacts : []))\n\tconst $clientPending = createStore<boolean>(false)\n\n\tconst getClientFx = attach({\n\t\teffect: clientApi.clientQuery,\n\t})\n\n\t$clientPending.on(getClientFx.pending, (_, pending) => pending)\n\t$client.on(getClientFx.doneData, (_, client) => client)\n\n\treturn { getClientFx, $clientPending, $client, $contacts }\n}\n","import { attach, createStore } from 'effector'\n\nimport { clientApi, type ClientManager } from '~src/shared/api'\n\nexport function createClientManagers() {\n\tconst $clientManagers = createStore<ClientManager[]>([])\n\tconst $clientMangersPending = createStore<boolean>(false)\n\n\tconst getClientManagersFx = attach({\n\t\teffect: clientApi.clientManagersQuery,\n\t})\n\n\t$clientMangersPending.on(getClientManagersFx.pending, (_, pending) => pending)\n\t$clientManagers.on(getClientManagersFx.doneData, (_, clientManagers) => clientManagers)\n\n\treturn {\n\t\t$clientManagers,\n\t\t$clientMangersPending,\n\t\tgetClientManagersFx,\n\t}\n}\n","import { attach, createStore } from 'effector'\n\nimport { clientApi, type ClientSubsidy } from '~src/shared/api'\n\nexport function createClientSubsidies() {\n\tconst $clientSubsidies = createStore<ClientSubsidy[]>([])\n\tconst $clientSubsidiesPending = createStore<boolean>(false)\n\n\tconst getClientSubsidies = attach({\n\t\teffect: clientApi.clientSubsidiesQuery,\n\t})\n\n\t$clientSubsidiesPending.on(getClientSubsidies.pending, (_, pending) => pending)\n\t$clientSubsidies.on(getClientSubsidies.doneData, (_, clientSubsidies) => clientSubsidies)\n\n\treturn {\n\t\t$clientSubsidies,\n\t\t$clientSubsidiesPending,\n\t\tgetClientSubsidies,\n\t}\n}\n\nexport function isClientSubsidiesGuard(clientSubsidies: ClientSubsidy[]): clientSubsidies is ClientSubsidy[] {\n\treturn Array.isArray(clientSubsidies) && clientSubsidies.length !== 0\n}\n","import { attach, createStore } from 'effector'\n\nimport { clientApi, type ClientContract } from '~src/shared/api'\n\nexport function createClientContracts() {\n\tconst $clientContracts = createStore<ClientContract[]>([])\n\tconst $clientContractsPending = createStore<boolean>(false)\n\n\tconst getClientContractsFx = attach({\n\t\teffect: clientApi.clientContractsQuery,\n\t})\n\n\t$clientContractsPending.on(getClientContractsFx.pending, (_, pending) => pending)\n\t$clientContracts.on(getClientContractsFx.doneData, (_, clientContracts) => clientContracts)\n\n\treturn { $clientContracts, $clientContractsPending, getClientContractsFx }\n}\n\nexport function isClientContractsGuard(clientContracts: ClientContract[]): clientContracts is ClientContract[] {\n\treturn Array.isArray(clientContracts) && clientContracts.length !== 0\n}\n","import { attach, createStore } from 'effector'\n\nimport { clientApi, type ClientLastContract } from '~src/shared/api'\n\nexport function createClientLastContract() {\n\tconst $clientLastContract = createStore<ClientLastContract | null>(null)\n\tconst $clientLastContractPending = createStore<boolean>(false)\n\n\tconst getClientLastContractFx = attach({\n\t\teffect: clientApi.clientLastContractQuery,\n\t})\n\n\t$clientLastContractPending.on(getClientLastContractFx.pending, (_, pending) => pending)\n\t$clientLastContract.on(getClientLastContractFx.doneData, (_, clientLastContract) => clientLastContract)\n\n\treturn {\n\t\tgetClientLastContractFx,\n\t\t$clientLastContract,\n\t\t$clientLastContractPending,\n\t}\n}\n","import { Badge, type BadgeProps } from '@chakra-ui/react'\n\ninterface ContactBadgeProps extends BadgeProps {\n\tactive: boolean\n}\n\nexport function ContactBadge(props: ContactBadgeProps) {\n\tconst { active } = props\n\n\tif (active) {\n\t\treturn <Badge colorScheme='green'>Действительный</Badge>\n\t} else {\n\t\treturn <Badge colorScheme='red'>Не действительный</Badge>\n\t}\n}\n","import { Box, Card, CardBody, type CardProps, Center, Spinner, Stack, type StackProps, Text } from '@chakra-ui/react'\nimport { useUnit } from 'effector-react'\n\nimport { type ClientContact } from '~src/shared/api'\nimport { DescriptionText } from '~src/shared/ui'\n\nimport type { createClient } from '../model'\nimport { ContactBadge } from './contact-badge'\n\ninterface ClientContactsCardProps extends Omit<StackProps, 'title'> {\n\tmodel: ReturnType<typeof createClient>\n}\n\nexport function ClientContacts(props: ClientContactsCardProps) {\n\tconst { model, ...otherProps } = props\n\tconst [contacts, contactsPending] = useUnit([model.$contacts, model.$clientPending])\n\n\treturn (\n\t\t<Stack {...otherProps}>\n\t\t\t{contacts.length !== 0 && (\n\t\t\t\t<>\n\t\t\t\t\t{contacts.map((contact, index) => (\n\t\t\t\t\t\t<ClientContactCard key={index} contact={contact} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{!contactsPending && contacts.length === 0 && <Center flexGrow='1'>Нету контактов</Center>}\n\t\t\t{contactsPending && (\n\t\t\t\t<Center flexGrow='1'>\n\t\t\t\t\t<Spinner color='blue.500' />\n\t\t\t\t</Center>\n\t\t\t)}\n\t\t</Stack>\n\t)\n}\n\ninterface ClientContactCardProps extends CardProps {\n\tcontact: ClientContact\n}\n\nexport function ClientContactCard(props: ClientContactCardProps) {\n\tconst { contact, ...otherProps } = props\n\n\treturn (\n\t\t<Card {...otherProps}>\n\t\t\t<CardBody>\n\t\t\t\t<Stack>\n\t\t\t\t\t<Text fontSize='xl' fontWeight='medium'>\n\t\t\t\t\t\t{contact.contactName}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<ContactBadge active={contact.active} />\n\t\t\t\t\t</Box>\n\t\t\t\t\t<DescriptionText title='Номер телефона:'>{contact.contactPhone}</DescriptionText>\n\t\t\t\t\t<DescriptionText title='Почта:'>{contact.contactEmail}</DescriptionText>\n\t\t\t\t\t<DescriptionText title='Было обновлено:'>{contact.updateTime}</DescriptionText>\n\t\t\t\t\t<DescriptionText title='Автор обновления:'>{contact.updateAuthor}</DescriptionText>\n\t\t\t\t\t<DescriptionText title='Позиция автора:'>{contact.updateAuthorPosition}</DescriptionText>\n\t\t\t\t</Stack>\n\t\t\t</CardBody>\n\t\t</Card>\n\t)\n}\n","import {\n\tBadge,\n\tBox,\n\tCard,\n\tCardBody,\n\ttype CardProps,\n\tCenter,\n\tSpinner,\n\tStack,\n\ttype StackProps,\n\tText,\n} from '@chakra-ui/react'\nimport { useUnit } from 'effector-react'\n\nimport type { ClientManager } from '~src/shared/api'\nimport { DescriptionText } from '~src/shared/ui'\n\nimport type { createClientManagers } from '../model'\n\ninterface ClientManagersProps extends StackProps {\n\tmodel: ReturnType<typeof createClientManagers>\n}\n\nexport function ClientManagers(props: ClientManagersProps) {\n\tconst { model, ...otherProps } = props\n\tconst [managers, managersPending] = useUnit([model.$clientManagers, model.$clientMangersPending])\n\n\treturn (\n\t\t<Stack {...otherProps}>\n\t\t\t{managers.length !== 0 && (\n\t\t\t\t<>\n\t\t\t\t\t{managers.map((manager, index) => (\n\t\t\t\t\t\t<ClientManagerCard key={index} manager={manager} />\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{!managersPending && managers.length === 0 && <Center flexGrow='1'>Нет менеджеров</Center>}\n\t\t\t{managersPending && (\n\t\t\t\t<Center flexGrow='1'>\n\t\t\t\t\t<Spinner color='blue.500' />\n\t\t\t\t</Center>\n\t\t\t)}\n\t\t</Stack>\n\t)\n}\n\ninterface ClientManagerCardProps extends CardProps {\n\tmanager: ClientManager\n}\n\nexport function ClientManagerCard(props: ClientManagerCardProps) {\n\tconst { manager, ...otherProps } = props\n\n\treturn (\n\t\t<Card {...otherProps}>\n\t\t\t<CardBody>\n\t\t\t\t<Text fontSize='md' fontWeight='medium'>\n\t\t\t\t\t{manager.name}\n\t\t\t\t</Text>\n\t\t\t\t<Box>\n\t\t\t\t\t<Badge colorScheme='orange'>{manager.season}</Badge>\n\t\t\t\t</Box>\n\t\t\t\t<DescriptionText title='Позиция:'>{manager.position}</DescriptionText>\n\t\t\t\t<DescriptionText title='Директория:'>{manager.direction}</DescriptionText>\n\t\t\t</CardBody>\n\t\t</Card>\n\t)\n}\n","import { Badge, Box, Card, CardBody, type CardProps, Center, Spinner, Stack, Text } from '@chakra-ui/react'\n\nimport { type ClientContract, type ClientLastContract } from '~src/shared/api'\nimport { DescriptionText } from '~src/shared/ui'\n\ninterface ClientContractCardProps extends CardProps {\n\tcontract: ClientContract | null\n\tcontractPending?: boolean\n}\n\nexport function ClientContractCard(props: ClientContractCardProps) {\n\tconst { contract, contractPending = false, ...otherProps } = props\n\n\treturn (\n\t\t<Card {...otherProps}>\n\t\t\t{contract && (\n\t\t\t\t<CardBody>\n\t\t\t\t\t<Stack>\n\t\t\t\t\t\t<Text fontSize='xl' fontWeight='medium'>\n\t\t\t\t\t\t\t{contract.name}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Stack direction='row' flexWrap='wrap'>\n\t\t\t\t\t\t\t<Badge colorScheme='orange'>{contract.season}</Badge>\n\t\t\t\t\t\t\t<ContractBadge isActive={contract.success} />\n\t\t\t\t\t\t\t<Badge colorScheme='blue'>{contract.status}</Badge>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t<DescriptionText title='Номер:'>{contract.number}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Сумма:'>{contract.sum}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Основной контракт:'>{contract.mainContract}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Контракт менеджера:'>{contract.managerContract}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Способ доставки:'>{contract.deliveryMethod}</DescriptionText>\n\t\t\t\t\t</Stack>\n\t\t\t\t</CardBody>\n\t\t\t)}\n\t\t\t{!contract && <Center flexGrow='1'>Нету данных</Center>}\n\t\t\t{contractPending && (\n\t\t\t\t<Center flexGrow='1'>\n\t\t\t\t\t<Spinner colorScheme='blue' />\n\t\t\t\t</Center>\n\t\t\t)}\n\t\t</Card>\n\t)\n}\n\ninterface ClientLastContractCardProps extends CardProps {\n\tcontract: ClientLastContract | null\n\tcontractPending?: boolean\n}\n\nexport function ClientLastContractCard(props: ClientLastContractCardProps) {\n\tconst { contract, contractPending, ...otherProps } = props\n\n\treturn (\n\t\t<Card {...otherProps}>\n\t\t\t{contract && (\n\t\t\t\t<CardBody>\n\t\t\t\t\t<Stack>\n\t\t\t\t\t\t<Stack direction='row' flexWrap='wrap'>\n\t\t\t\t\t\t\t<Badge colorScheme='orange'>{contract.season}</Badge>\n\t\t\t\t\t\t\t<Badge colorScheme='blue'>{contract.status}</Badge>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t<DescriptionText title='Номер:'>{contract.number}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Клиент:'>{contract.client}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Менеджер:'>{contract.manager}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Сумма:'>{contract.sum}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Адрес:'>{contract.deliveryAddress}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Дата начала:'>{contract.dateStart}</DescriptionText>\n\t\t\t\t\t\t<DescriptionText title='Дата окончания:'>{contract.dateEnd}</DescriptionText>\n\t\t\t\t\t</Stack>\n\t\t\t\t</CardBody>\n\t\t\t)}\n\t\t\t{!contractPending && !contract && <Center flexGrow='1'>Нету последнего контракта</Center>}\n\t\t\t{contractPending && (\n\t\t\t\t<Center flexGrow='1'>\n\t\t\t\t\t<Spinner color='blue.500' />\n\t\t\t\t</Center>\n\t\t\t)}\n\t\t</Card>\n\t)\n}\n\nfunction ContractBadge(props: { isActive: boolean }) {\n\tconst { isActive } = props\n\treturn (\n\t\t<>{isActive ? <Badge colorScheme='green'>Завершенный</Badge> : <Badge colorScheme='red'>Не завершенный</Badge>}</>\n\t)\n}\n","import { attach, createEvent, createStore, sample } from 'effector'\nimport { reset } from 'patronum'\n\nimport { getLandsPositions, LandsToLandFactory } from '~src/features/lands-to-land'\n\nimport {\n\tClientPlotsFactory,\n\tcreateClient,\n\tcreateClientContracts,\n\tcreateClientLastContract,\n\tcreateClientManagers,\n\tcreateClientPoints,\n\tcreateClientSubsidies,\n} from '~src/entities/client'\nimport { MapFactory } from '~src/entities/map'\n\nimport { type ClientPlot } from '~src/shared/api'\nimport { createTabs, TableFactory } from '~src/shared/ui'\n\nconst TABS = { main: 0, subsidies: 1, contracts: 2 }\n\nexport const clientProfilePageMounted = createEvent<{ clientId: number }>()\nexport const clientProfilePageUnmounted = createEvent<void>()\n\nexport const $clientId = createStore<number | null>(null)\n\nexport const $$tabs = createTabs({\n\tdefaultTab: TABS.main,\n\ttabs: TABS,\n})\n\nexport const $$map = MapFactory.createMap()\nexport const $$client = createClient()\nexport const $$clientPlots = ClientPlotsFactory.createClientPlots()\nexport const $$clientPlotsToPlot = LandsToLandFactory.createLandsToLand({\n\tlands: $$clientPlots.$clientPlots.map(getValidClientPlots),\n})\nexport const $$clientPoints = createClientPoints()\nexport const $$clientManagers = createClientManagers()\nexport const $$clientLastContract = createClientLastContract()\n\nexport const $$clientSubsidies = createClientSubsidies()\nexport const $$clientSubsidiesTable = TableFactory.createTable({\n\tdata: $$clientSubsidies.$clientSubsidies,\n\ttableGenerateCb: () => ({}),\n})\n\nexport const $$clientContracts = createClientContracts()\nexport const $$clientContractsTable = TableFactory.createTable({\n\tdata: $$clientContracts.$clientContracts,\n\ttableGenerateCb: () => ({}),\n})\n\nconst fitClientPlotsFx = attach({\n\teffect: MapFactory.fitBoundsFx,\n\tsource: { map: $$map.$map, clientPlots: $$clientPlots.$clientPlots },\n\tmapParams: (params: void, { map, clientPlots }) => ({\n\t\tmap,\n\t\tpositions: getLandsPositions(getValidClientPlots(clientPlots)),\n\t}),\n})\nconst fitClientPlot = attach({\n\teffect: MapFactory.fitBoundsFx,\n\tsource: { map: $$map.$map, clientPlot: $$clientPlotsToPlot.$land },\n\tmapParams: (params: void, { map, clientPlot }) => ({ map, positions: clientPlot?.geometryRings ?? [] }),\n})\n\nsample({\n\tclock: clientProfilePageMounted,\n\tfn: ({ clientId }) => clientId,\n\ttarget: $clientId,\n})\n\nsample({\n\tclock: $clientId,\n\tfilter: (clientId: number | null): clientId is number => clientId !== null,\n\tfn: (clientId) => ({ clientId }),\n\ttarget: [$$client.getClientFx, $$clientManagers.getClientManagersFx, $$clientLastContract.getClientLastContractFx],\n})\n\nconst clientIdOrTabIsMainWillChange = sample({\n\tclock: [$$tabs.$tab, $clientId],\n\tsource: { tabIndex: $$tabs.$tab, clientId: $clientId },\n\tfilter: (source: { tabIndex: number; clientId: number | null }): source is { tabIndex: number; clientId: number } =>\n\t\tsource.clientId !== null,\n})\n\nclientIdOrTabIsMainWillChange.watch(({ tabIndex, clientId }) => {\n\tif (!clientId) return\n\n\tif (tabIndex === TABS.main) {\n\t\t$$clientPlots.getClientPlotsFx({ clientId })\n\t\t$$clientPoints.getClientPointsFx({ clientId })\n\t}\n\tif (tabIndex === TABS.subsidies) {\n\t\t$$clientSubsidies.getClientSubsidies({ clientId })\n\t}\n\tif (tabIndex === TABS.contracts) {\n\t\t$$clientContracts.getClientContractsFx({ clientId })\n\t}\n})\n\nsample({\n\tclock: $$clientPlots.$clientPlots,\n\ttarget: fitClientPlotsFx,\n})\n\nsample({\n\tclock: $$clientPlotsToPlot.landClicked,\n\ttarget: fitClientPlot,\n})\n\nreset({\n\tclock: clientProfilePageUnmounted,\n\ttarget: [\n\t\t$$clientPlots.$clientPlots,\n\t\t$$clientPlotsToPlot.$landId,\n\t\t$$clientSubsidies.$clientSubsidies,\n\t\t$$clientContracts.$clientContracts,\n\t],\n})\n\nfunction getValidClientPlots(clientPlots: ClientPlot[]) {\n\treturn clientPlots.map((clientPlot) => ({ ...clientPlot, id: clientPlot.plotId }))\n}\n","import {\n\tBadge,\n\tBox,\n\tCenter,\n\tContainer,\n\tGrid,\n\tSpinner,\n\tStack,\n\tStackItem,\n\tTab,\n\tTabList,\n\tTabPanel,\n\tTabPanels,\n\tTabs,\n\tText,\n} from '@chakra-ui/react'\nimport { useUnit } from 'effector-react'\nimport React from 'react'\nimport { Marker, Polygon, Tooltip } from 'react-leaflet'\nimport { useParams } from 'react-router'\n\nimport { Header } from '~src/widgets/header'\n\nimport { LandsToLandFactory } from '~src/features/lands-to-land'\n\nimport { ClientCard, ClientContacts, ClientPlotsFactory } from '~src/entities/client'\nimport { ClientLastContractCard, ClientManagers } from '~src/entities/client/ui'\nimport { MapFactory } from '~src/entities/map'\n\nimport { type ClientContract, type ClientSubsidy } from '~src/shared/api'\nimport { type Column, TableFactory, useTable } from '~src/shared/ui'\n\nimport * as model from './model'\nimport { cultureColors } from '../map/lib'\n\nexport function ClientProfilePage() {\n\tconst [handleMount, handleUnmount] = useUnit([model.clientProfilePageMounted, model.clientProfilePageUnmounted])\n\tconst [tabIndex, handleTabChange] = useUnit([model.$$tabs.$tab, model.$$tabs.tabChanged])\n\tconst { clientId } = useParams()\n\n\tReact.useEffect(() => {\n\t\thandleMount({ clientId: Number(clientId) })\n\n\t\treturn () => handleUnmount()\n\t}, [handleMount, handleUnmount, clientId])\n\n\treturn (\n\t\t<Box>\n\t\t\t<Header />\n\t\t\t<Container maxW='container.xl' py='10'>\n\t\t\t\t<Stack direction={{ base: 'column', md: 'row' }} spacing='2'>\n\t\t\t\t\t<StackItem w={{ base: '100%', md: '75%' }} minH='0'>\n\t\t\t\t\t\t<Tabs index={tabIndex} onChange={handleTabChange} isFitted shadow='md' rounded='md'>\n\t\t\t\t\t\t\t<TabList>\n\t\t\t\t\t\t\t\t<Tab>Основная</Tab>\n\t\t\t\t\t\t\t\t<Tab>Субсидий</Tab>\n\t\t\t\t\t\t\t\t<Tab>Контракты</Tab>\n\t\t\t\t\t\t\t</TabList>\n\t\t\t\t\t\t\t<TabPanels>\n\t\t\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t\t\t<MainTabPanel />\n\t\t\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t\t\t<SubsidiesTabPanel />\n\t\t\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t\t\t<ContractsTabPanel />\n\t\t\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t\t</TabPanels>\n\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t</StackItem>\n\t\t\t\t\t<StackItem w={{ base: '100%', md: '25%' }} minH='0'>\n\t\t\t\t\t\t<Stack>\n\t\t\t\t\t\t\t<ClientBlock />\n\t\t\t\t\t\t\t<Box shadow='md' rounded='md' p='3'>\n\t\t\t\t\t\t\t\t<Box px='2' py='2'>\n\t\t\t\t\t\t\t\t\t<Text fontSize='xl' fontWeight='bold' color='blue.500'>\n\t\t\t\t\t\t\t\t\t\tКонтакты\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<ClientContacts model={model.$$client} minH='15rem' maxH='20rem' overflow='auto' />\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box shadow='md' rounded='md' p='3'>\n\t\t\t\t\t\t\t\t<Box px='2' py='2'>\n\t\t\t\t\t\t\t\t\t<Text fontSize='xl' fontWeight='bold' color='blue.500'>\n\t\t\t\t\t\t\t\t\t\tМенеджеры\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<ClientManagers model={model.$$clientManagers} minH='15rem' maxH='20rem' overflow='auto' />\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box shadow='md' rounded='md' p='3'>\n\t\t\t\t\t\t\t\t<Box px='2' py='2'>\n\t\t\t\t\t\t\t\t\t<Text fontSize='xl' fontWeight='bold' color='blue.500'>\n\t\t\t\t\t\t\t\t\t\tПоследний контракт\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<ClientLastContractBlock />\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t</StackItem>\n\t\t\t\t</Stack>\n\t\t\t</Container>\n\t\t</Box>\n\t)\n}\n\nfunction ClientBlock() {\n\tconst [client, clientPending] = useUnit([model.$$client.$client, model.$$client.$clientPending])\n\n\treturn (\n\t\t<>\n\t\t\t<ClientCard client={client} clientPending={clientPending} minH='20rem'>\n\t\t\t\t<></>\n\t\t\t</ClientCard>\n\t\t</>\n\t)\n}\n\nfunction ClientLastContractBlock() {\n\tconst [lastContract, lastContractPending] = useUnit([\n\t\tmodel.$$clientLastContract.$clientLastContract,\n\t\tmodel.$$clientLastContract.$clientLastContractPending,\n\t])\n\n\treturn (\n\t\t<>\n\t\t\t<ClientLastContractCard contract={lastContract} contractPending={lastContractPending} minH='10rem' />\n\t\t</>\n\t)\n}\n\nfunction MainTabPanel() {\n\tconst [clientPoints, clientPointsPending] = useUnit([\n\t\tmodel.$$clientPoints.$clientPoints,\n\t\tmodel.$$clientPoints.$clientPointsPending,\n\t])\n\tconst [clientPlots, clientPlot, clientPlotsPending] = useUnit([\n\t\tmodel.$$clientPlots.$clientPlots,\n\t\tmodel.$$clientPlotsToPlot.$land,\n\t\tmodel.$$clientPlots.$clientPlotsPending,\n\t])\n\n\tconst clientCultures = React.useMemo(() => {\n\t\treturn clientPlots.reduce((prev, acc) => {\n\t\t\tconst findIndex = prev.findIndex((culture) => culture.plotCultId === acc.plotCultId)\n\t\t\tif (findIndex === -1) {\n\t\t\t\tprev.push({\n\t\t\t\t\tplotCultId: acc.plotCultId,\n\t\t\t\t\tplotCultName: acc.plotCultName,\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn prev\n\t\t}, [] as { plotCultId: number; plotCultName: string }[])\n\t}, [clientPlots])\n\n\tif (clientPointsPending || clientPlotsPending) {\n\t\treturn (\n\t\t\t<Center flexGrow='1' minH='30rem'>\n\t\t\t\t<Spinner colorScheme='blue' />\n\t\t\t</Center>\n\t\t)\n\t}\n\n\treturn (\n\t\t<Box position='relative'>\n\t\t\t<Grid templateColumns='1fr 300px'>\n\t\t\t\t<MapFactory.Map\n\t\t\t\t\tmodel={model.$$map}\n\t\t\t\t\tstyle={{ height: '100%', borderRadius: 'inherit' }}\n\t\t\t\t\tcontainerProps={{ height: 'max(50vh, 300px)', shadow: 'md', borderRadius: '20px' }}\n\t\t\t\t>\n\t\t\t\t\t<LandsToLandFactory.Lands model={model.$$clientPlotsToPlot}>\n\t\t\t\t\t\t{({ land, onClick }) => (\n\t\t\t\t\t\t\t<Polygon\n\t\t\t\t\t\t\t\tpositions={land.geometryRings as any}\n\t\t\t\t\t\t\t\tpathOptions={{ color: 'blue' }}\n\t\t\t\t\t\t\t\teventHandlers={{ click: () => onClick(land.id) }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</LandsToLandFactory.Lands>\n\t\t\t\t\t<LandsToLandFactory.Land model={model.$$clientPlotsToPlot}>\n\t\t\t\t\t\t{({ land }) => <Polygon positions={land.geometryRings as any} pathOptions={{ color: 'black' }} />}\n\t\t\t\t\t</LandsToLandFactory.Land>\n\n\t\t\t\t\t{clientPoints.map((clientPoint, index) => (\n\t\t\t\t\t\t<Marker key={index} position={clientPoint.coordinate as any}>\n\t\t\t\t\t\t\t<Tooltip sticky opacity={0.8} direction='bottom'>\n\t\t\t\t\t\t\t\t<Stack direction='row' align='center'>\n\t\t\t\t\t\t\t\t\t<Text fontSize='sm' fontWeight='bold'>\n\t\t\t\t\t\t\t\t\t\tКлиент:\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<Text>{clientPoint.name}</Text>\n\t\t\t\t\t\t\t\t\t<Text fontSize='sm' fontWeight='bold'>\n\t\t\t\t\t\t\t\t\t\tКатегория:\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t<Text>{clientPoint.category}</Text>\n\t\t\t\t\t\t\t\t</Stack>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t</Marker>\n\t\t\t\t\t))}\n\t\t\t\t</MapFactory.Map>\n\n\t\t\t\t<Stack p='2'>\n\t\t\t\t\t<Stack direction='row' flexWrap='wrap'>\n\t\t\t\t\t\t{clientCultures.map((culture, index) => {\n\t\t\t\t\t\t\tconst cultureColor = cultureColors[culture.plotCultId] ?? 'red'\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Badge key={index} bgColor={cultureColor.bgColor} color={cultureColor.color} whiteSpace='pre-wrap'>\n\t\t\t\t\t\t\t\t\t{culture.plotCultName}\n\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Stack>\n\t\t\t\t\t<Grid templateColumns='auto 1fr' gap='1' alignItems='center'>\n\t\t\t\t\t\t<Text fontSize='md' fontWeight='medium'>\n\t\t\t\t\t\t\tУчасток:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text fontSize='sm'>{clientPlot ? clientPlot.plotName : 'Не выбран'}</Text>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid templateColumns='auto 1fr' gap='1' alignItems='center'>\n\t\t\t\t\t\t<Text fontSize='md' fontWeight='medium'>\n\t\t\t\t\t\t\tКультура:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text fontSize='sm'>{clientPlot ? clientPlot.plotCultName : 'Не выбран'}</Text>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid templateColumns='auto 1fr' gap='1' alignItems='center'>\n\t\t\t\t\t\t<Text fontSize='md' fontWeight='medium'>\n\t\t\t\t\t\t\tПлощадь:\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text fontSize='sm'>{clientPlot ? `${clientPlot.plotArea} га` : 'Не выбран'}</Text>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Stack>\n\t\t\t</Grid>\n\n\t\t\t{/* {(clientPlotsPending || clientPointsPending) && (\n\t\t\t\t<Center position='absolute' top='50%' left='50%' zIndex='sticky' transform='translateX(-50%) translateY(-50%)'>\n\t\t\t\t\t<Spinner colorScheme='blue' />\n\t\t\t\t</Center>\n\t\t\t)} */}\n\t\t</Box>\n\t)\n}\n\nfunction SubsidiesTabPanel() {\n\tconst [subsidies, subsidiesPending] = useUnit([\n\t\tmodel.$$clientSubsidies.$clientSubsidies,\n\t\tmodel.$$clientSubsidies.$clientSubsidiesPending,\n\t])\n\tconst [tableState] = useUnit([model.$$clientSubsidiesTable.$tableState])\n\n\tconst columns = React.useMemo<Column<ClientSubsidy>[]>(\n\t\t() => [\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Заявитель</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.appName}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Вид деятельности</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.activity}</TableFactory.Td>,\n\t\t\t},\n\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th isNumeric color='white'>\n\t\t\t\t\t\tСумма\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.sum}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Единица измерения</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.unit}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tДата подачи\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.paymentDate}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tДата оплаты\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.paymentDate}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Получатель</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.providerName}</TableFactory.Td>,\n\t\t\t},\n\t\t],\n\t\t[],\n\t)\n\tconst { getHeaders, getCells } = useTable({\n\t\tdata: subsidies,\n\t\tcolumns,\n\t\ttableState,\n\t})\n\n\treturn (\n\t\t<TableFactory.TableContainer\n\t\t\tborderColor='lightgray'\n\t\t\tborderWidth='1px'\n\t\t\tborderRadius='md'\n\t\t\tboxShadow='md'\n\t\t\toverflow='auto'\n\t\t\twhiteSpace='pre-wrap'\n\t\t\tw='full'\n\t\t\th='fit-content'\n\t\t>\n\t\t\t<TableFactory.Table\n\t\t\t\tsx={{ borderCollapse: 'collapse' }}\n\t\t\t\toverflow='hidden'\n\t\t\t\tposition='relative'\n\t\t\t\tborderStyle='hidden'\n\t\t\t>\n\t\t\t\t<TableFactory.THead bgColor='blue.500'>\n\t\t\t\t\t<TableFactory.Tr>\n\t\t\t\t\t\t{getHeaders().map((item, index) => (\n\t\t\t\t\t\t\t<React.Fragment key={index}>{item}</React.Fragment>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableFactory.Tr>\n\t\t\t\t</TableFactory.THead>\n\t\t\t\t<TableFactory.TBody\n\t\t\t\t\tcolumnLength={columns.length}\n\t\t\t\t\tempty={{ empty: subsidies.length === 0 }}\n\t\t\t\t\tloading={{ loading: subsidiesPending }}\n\t\t\t\t>\n\t\t\t\t\t{getCells().map((item, index) => (\n\t\t\t\t\t\t<TableFactory.Tr key={index}>\n\t\t\t\t\t\t\t<>{item}</>\n\t\t\t\t\t\t</TableFactory.Tr>\n\t\t\t\t\t))}\n\t\t\t\t</TableFactory.TBody>\n\t\t\t</TableFactory.Table>\n\t\t</TableFactory.TableContainer>\n\t)\n}\n\nfunction ContractsTabPanel() {\n\tconst [contracts, contractsPending] = useUnit([\n\t\tmodel.$$clientContracts.$clientContracts,\n\t\tmodel.$$clientContracts.$clientContractsPending,\n\t])\n\tconst [tableState] = useUnit([model.$$clientContractsTable.$tableState])\n\n\tconst columns = React.useMemo<Column<ClientContract>[]>(\n\t\t() => [\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Контракт</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.name}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Способ доставки</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.deliveryMethod}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tСезон\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.season}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Статус</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.status}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Контрак менеджера</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.managerContract}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Основной контракт</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => <TableFactory.Td>{item.mainContract}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tЦифры\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.number}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tСумма\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.sum}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tДата создания\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.dateCreate}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tДата начала\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.dateStart}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => (\n\t\t\t\t\t<TableFactory.Th color='white' isNumeric>\n\t\t\t\t\t\tДата окончания\n\t\t\t\t\t</TableFactory.Th>\n\t\t\t\t),\n\t\t\t\tcell: ({ item }) => <TableFactory.Td isNumeric>{item.dateEnd}</TableFactory.Td>,\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: () => <TableFactory.Th color='white'>Подтверждение</TableFactory.Th>,\n\t\t\t\tcell: ({ item }) => (\n\t\t\t\t\t<TableFactory.Td textAlign='center'>\n\t\t\t\t\t\t{item.success ? (\n\t\t\t\t\t\t\t<Badge colorScheme='green'>Подтверждено</Badge>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Badge colorScheme='red'>Не Подтверждено</Badge>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableFactory.Td>\n\t\t\t\t),\n\t\t\t},\n\t\t],\n\t\t[],\n\t)\n\tconst { getHeaders, getCells } = useTable({\n\t\tdata: contracts,\n\t\tcolumns,\n\t\ttableState,\n\t})\n\n\treturn (\n\t\t<TableFactory.TableContainer\n\t\t\tborderColor='lightgray'\n\t\t\tborderWidth='1px'\n\t\t\tborderRadius='md'\n\t\t\tboxShadow='md'\n\t\t\toverflowY='auto'\n\t\t\toverflowX='auto'\n\t\t\twhiteSpace='pre-wrap'\n\t\t\tw='full'\n\t\t\tmaxH='container.sm'\n\t\t>\n\t\t\t<TableFactory.Table\n\t\t\t\tsx={{ borderCollapse: 'collapse' }}\n\t\t\t\toverflow='hidden'\n\t\t\t\tposition='relative'\n\t\t\t\tborderStyle='hidden'\n\t\t\t>\n\t\t\t\t<TableFactory.THead bgColor='blue.500' position='sticky' top='0' zIndex='1'>\n\t\t\t\t\t<TableFactory.Tr>\n\t\t\t\t\t\t{getHeaders().map((item, index) => (\n\t\t\t\t\t\t\t<React.Fragment key={index}>{item}</React.Fragment>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableFactory.Tr>\n\t\t\t\t</TableFactory.THead>\n\t\t\t\t<TableFactory.TBody\n\t\t\t\t\tcolumnLength={columns.length}\n\t\t\t\t\tempty={{ empty: contracts.length === 0 }}\n\t\t\t\t\tloading={{ loading: contractsPending }}\n\t\t\t\t>\n\t\t\t\t\t{getCells().map((item, index) => (\n\t\t\t\t\t\t<TableFactory.Tr key={index}>\n\t\t\t\t\t\t\t<>{item}</>\n\t\t\t\t\t\t</TableFactory.Tr>\n\t\t\t\t\t))}\n\t\t\t\t</TableFactory.TBody>\n\t\t\t</TableFactory.Table>\n\t\t</TableFactory.TableContainer>\n\t)\n}\n"],"names":["createClient","$client","createStore","$contacts","client","$clientPending","getClientFx","attach","clientApi.clientQuery","_","pending","createClientManagers","$clientManagers","$clientMangersPending","getClientManagersFx","clientApi.clientManagersQuery","clientManagers","createClientSubsidies","$clientSubsidies","$clientSubsidiesPending","getClientSubsidies","clientApi.clientSubsidiesQuery","clientSubsidies","createClientContracts","$clientContracts","$clientContractsPending","getClientContractsFx","clientApi.clientContractsQuery","clientContracts","createClientLastContract","$clientLastContract","$clientLastContractPending","getClientLastContractFx","clientApi.clientLastContractQuery","clientLastContract","ContactBadge","props","active","jsx","Badge","ClientContacts","model","otherProps","contacts","contactsPending","useUnit","jsxs","Stack","Fragment","contact","index","ClientContactCard","Center","Spinner","Card","CardBody","Text","Box","DescriptionText","ClientManagers","managers","managersPending","manager","ClientManagerCard","ClientLastContractCard","contract","contractPending","TABS","clientProfilePageMounted","createEvent","clientProfilePageUnmounted","$clientId","$$tabs","createTabs","$$map","MapFactory","$$client","$$clientPlots","ClientPlotsFactory","$$clientPlotsToPlot","LandsToLandFactory","getValidClientPlots","$$clientPoints","createClientPoints","$$clientManagers","$$clientLastContract","$$clientSubsidies","$$clientSubsidiesTable","TableFactory","$$clientContracts","$$clientContractsTable","fitClientPlotsFx","params","map","clientPlots","getLandsPositions","fitClientPlot","clientPlot","sample","clientId","clientIdOrTabIsMainWillChange","source","tabIndex","reset","ClientProfilePage","handleMount","handleUnmount","model.clientProfilePageMounted","model.clientProfilePageUnmounted","handleTabChange","model.$$tabs","useParams","React","Header","Container","StackItem","Tabs","TabList","Tab","TabPanels","TabPanel","MainTabPanel","SubsidiesTabPanel","ContractsTabPanel","ClientBlock","model.$$client","model.$$clientManagers","ClientLastContractBlock","clientPending","ClientCard","lastContract","lastContractPending","model.$$clientLastContract","clientPoints","clientPointsPending","model.$$clientPoints","clientPlotsPending","model.$$clientPlots","model.$$clientPlotsToPlot","clientCultures","prev","acc","culture","Grid","model.$$map","land","onClick","Polygon","clientPoint","Marker","Tooltip","cultureColor","cultureColors","subsidies","subsidiesPending","model.$$clientSubsidies","tableState","model.$$clientSubsidiesTable","columns","item","getHeaders","getCells","useTable","contracts","contractsPending","model.$$clientContracts","model.$$clientContractsTable"],"mappings":"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"}