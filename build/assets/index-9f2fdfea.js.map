{"version":3,"file":"index-9f2fdfea.js","sources":["../../src/pages/client-business-point-mobile/model.ts","../../src/pages/client-business-point-mobile/page.tsx"],"sourcesContent":["import { createEvent, createStore, sample } from 'effector'\n\nimport { getLandsPositions, LandsToLandFactory } from '~src/features/lands-to-land'\n\nimport { ClientPlotsFactory } from '~src/entities/client'\nimport { fitBounds, MapFactory } from '~src/entities/map'\n\nimport { type ClientPlot } from '~src/shared/api'\n\nexport const clientBusinessPointMobilePageMounted = createEvent<{ clientId: number }>()\nexport const clientBusinessPointMobilePageUnMounted = createEvent<void>()\n\nexport const $clientId = createStore<number | null>(null)\n\nexport const $$map = MapFactory.createMap()\nexport const $$clientPlots = ClientPlotsFactory.createClientPlots()\nexport const $$clientPlotsToPlot = LandsToLandFactory.createLandsToLand({\n\tlands: $$clientPlots.$clientPlots.map(getValidClientPlots),\n})\n\nconst fitBound = fitBounds({\n\tmap: $$map.$map,\n\tlayer: {\n\t\tclientPlots: $$clientPlots.$clientPlots.map((clientPlots) => ({ positions: getLandsPositions(clientPlots) })),\n\t\tclientPlot: $$clientPlotsToPlot.$land.map((land) => ({ positions: land?.geometryRings ?? [] })),\n\t},\n})\n\nsample({\n\tclock: clientBusinessPointMobilePageMounted,\n\tfn: ({ clientId }) => clientId,\n\ttarget: $clientId,\n})\n\nsample({\n\tclock: $clientId,\n\tfilter: (clientId: number | null): clientId is number => clientId !== null,\n\tfn: (clientId) => ({\n\t\tclientId,\n\t}),\n\ttarget: $$clientPlots.getClientPlotsFx,\n})\n\nsample({\n\tclock: $$clientPlots.$clientPlots,\n\tfilter: (clientPlots) => clientPlots.length > 0,\n\ttarget: fitBound.clientPlots,\n})\n\nsample({\n\tclock: $$clientPlotsToPlot.landClicked,\n\tfilter: (clientPlot) => clientPlot !== null,\n\ttarget: fitBound.clientPlot,\n})\n\nfunction getValidClientPlots(clientPlots: ClientPlot[]) {\n\treturn clientPlots.map((clientPlot) => ({ ...clientPlot, id: clientPlot.plotId }))\n}\n","import { Box, Container, Flex } from '@chakra-ui/react'\nimport { useUnit } from 'effector-react'\nimport React from 'react'\nimport { Polygon } from 'react-leaflet'\nimport { useParams } from 'react-router'\n\nimport { LandsToLandFactory } from '~src/features/lands-to-land'\n\nimport { MapFactory } from '~src/entities/map'\n\nimport * as model from './model'\n\nexport function ClientBusinessPointMobilePage() {\n\tconst [handleMount, handleUnmount] = useUnit([\n\t\tmodel.clientBusinessPointMobilePageMounted,\n\t\tmodel.clientBusinessPointMobilePageUnMounted,\n\t])\n\tconst { clientId } = useParams<{ clientId: string }>()\n\n\tReact.useEffect(() => {\n\t\thandleMount({ clientId: Number(clientId) })\n\n\t\treturn () => {\n\t\t\thandleUnmount()\n\t\t}\n\t}, [clientId, handleMount, handleUnmount])\n\n\treturn (\n\t\t<Box>\n\t\t\t<Container minW='full' minH='100vh'>\n\t\t\t\t<Flex direction='column' flexGrow={1} justify='space-between' align='center'>\n\t\t\t\t\t<MapFactory.Map\n\t\t\t\t\t\tmodel={model.$$map}\n\t\t\t\t\t\tstyle={{ width: '100vw', height: '100vh' }}\n\t\t\t\t\t\tcontainerProps={{ height: '100vh' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<LandsToLandFactory.Lands model={model.$$clientPlotsToPlot}>\n\t\t\t\t\t\t\t{({ land, onClick }) => (\n\t\t\t\t\t\t\t\t<Polygon\n\t\t\t\t\t\t\t\t\tpositions={land.geometryRings as any}\n\t\t\t\t\t\t\t\t\tpathOptions={{ color: 'blue' }}\n\t\t\t\t\t\t\t\t\teventHandlers={{ click: () => onClick(land.id) }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</LandsToLandFactory.Lands>\n\t\t\t\t\t\t<LandsToLandFactory.Land model={model.$$clientPlotsToPlot}>\n\t\t\t\t\t\t\t{({ land }) => <Polygon positions={land.geometryRings as any} pathOptions={{ color: 'black' }} />}\n\t\t\t\t\t\t</LandsToLandFactory.Land>\n\t\t\t\t\t</MapFactory.Map>\n\t\t\t\t</Flex>\n\t\t\t</Container>\n\t\t</Box>\n\t)\n}\n"],"names":["clientBusinessPointMobilePageMounted","createEvent","clientBusinessPointMobilePageUnMounted","$clientId","createStore","$$map","MapFactory","$$clientPlots","ClientPlotsFactory","$$clientPlotsToPlot","LandsToLandFactory","getValidClientPlots","fitBound","fitBounds","clientPlots","getLandsPositions","land","sample","clientId","clientPlot","ClientBusinessPointMobilePage","handleMount","handleUnmount","useUnit","model.clientBusinessPointMobilePageMounted","model.clientBusinessPointMobilePageUnMounted","useParams","React","Box","jsx","Container","Flex","jsxs","model.$$map","model.$$clientPlotsToPlot","onClick","Polygon"],"mappings":"0fASO,MAAMA,EAAuCC,EAAkC,EACzEC,EAAyCD,EAAkB,EAE3DE,EAAYC,EAA2B,IAAI,EAE3CC,EAAQC,EAAW,YACnBC,EAAgBC,EAAmB,oBACnCC,EAAsBC,EAAmB,kBAAkB,CACvE,MAAOH,EAAc,aAAa,IAAII,CAAmB,CAC1D,CAAC,EAEKC,EAAWC,EAAU,CAC1B,IAAKR,EAAM,KACX,MAAO,CACN,YAAaE,EAAc,aAAa,IAAKO,IAAiB,CAAE,UAAWC,EAAkBD,CAAW,CAAA,EAAI,EAC5G,WAAYL,EAAoB,MAAM,IAAKO,IAAU,CAAE,WAAWA,GAAA,YAAAA,EAAM,gBAAiB,CAAA,CAAK,EAAA,CAC/F,CACD,CAAC,EAEDC,EAAO,CACN,MAAOjB,EACP,GAAI,CAAC,CAAE,SAAAkB,CAAA,IAAeA,EACtB,OAAQf,CACT,CAAC,EAEDc,EAAO,CACN,MAAOd,EACP,OAASe,GAAgDA,IAAa,KACtE,GAAKA,IAAc,CAClB,SAAAA,CAAA,GAED,OAAQX,EAAc,gBACvB,CAAC,EAEDU,EAAO,CACN,MAAOV,EAAc,aACrB,OAASO,GAAgBA,EAAY,OAAS,EAC9C,OAAQF,EAAS,WAClB,CAAC,EAEDK,EAAO,CACN,MAAOR,EAAoB,YAC3B,OAASU,GAAeA,IAAe,KACvC,OAAQP,EAAS,UAClB,CAAC,EAED,SAASD,EAAoBG,EAA2B,CAChD,OAAAA,EAAY,IAAKK,IAAgB,CAAE,GAAGA,EAAY,GAAIA,EAAW,MAAS,EAAA,CAClF,CC7CO,SAASC,GAAgC,CAC/C,KAAM,CAACC,EAAaC,CAAa,EAAIC,EAAQ,CAC5CC,EACAC,CAAM,CACN,EACK,CAAE,SAAAP,GAAaQ,IAErB,OAAAC,EAAM,UAAU,KACfN,EAAY,CAAE,SAAU,OAAOH,CAAQ,CAAG,CAAA,EAEnC,IAAM,CACEI,GAAA,GAEb,CAACJ,EAAUG,EAAaC,CAAa,CAAC,IAGvCM,EACA,CAAA,SAAAC,EAACC,EAAU,CAAA,KAAK,OAAO,KAAK,QAC3B,SAACD,EAAAE,EAAA,CAAK,UAAU,SAAS,SAAU,EAAG,QAAQ,gBAAgB,MAAM,SACnE,SAAAC,EAAC1B,EAAW,IAAX,CACA,MAAO2B,EACP,MAAO,CAAE,MAAO,QAAS,OAAQ,OAAQ,EACzC,eAAgB,CAAE,OAAQ,OAAQ,EAElC,SAAA,CAACJ,EAAAnB,EAAmB,MAAnB,CAAyB,MAAOwB,EAC/B,SAAC,CAAA,CAAE,KAAAlB,EAAM,QAAAmB,CAAA,IACTN,EAACO,EAAA,CACA,UAAWpB,EAAK,cAChB,YAAa,CAAE,MAAO,MAAO,EAC7B,cAAe,CAAE,MAAO,IAAMmB,EAAQnB,EAAK,EAAE,CAAE,CAAA,CAAA,EAGlD,EACAa,EAACnB,EAAmB,KAAnB,CAAwB,MAAOwB,EAC9B,UAAC,CAAE,KAAAlB,KAAYa,EAAAO,EAAA,CAAQ,UAAWpB,EAAK,cAAsB,YAAa,CAAE,MAAO,QAAW,CAAA,EAChG,CAAA,CAAA,CAAA,EAEF,EACD,CACD,CAAA,CAEF"}