{"version":3,"file":"chunk-G72KV6MB-8fe2283c.js","sources":["../../node_modules/.pnpm/@chakra-ui+react-use-merge-refs@2.0.7_react@18.2.0/node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs","../../node_modules/.pnpm/@chakra-ui+breakpoint-utils@2.0.8/node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs"],"sourcesContent":["// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n"],"names":["assignRef","ref","value","mergeRefs","refs","node","useMergeRefs","useMemo","mapResponsive","prop","mapper","item","isObject","result","key"],"mappings":"+CAEA,SAASA,EAAUC,EAAKC,EAAO,CAC7B,GAAID,GAAO,KAEX,IAAI,OAAOA,GAAQ,WAAY,CAC7BA,EAAIC,CAAK,EACT,MACD,CACD,GAAI,CACFD,EAAI,QAAUC,CACf,MAAC,CACA,MAAM,IAAI,MAAM,wBAAwBA,cAAkBD,IAAM,CACjE,EACH,CACA,SAASE,KAAaC,EAAM,CAC1B,OAAQC,GAAS,CACfD,EAAK,QAASH,GAAQ,CACpBD,EAAUC,EAAKI,CAAI,CACzB,CAAK,CACL,CACA,CACA,SAASC,KAAgBF,EAAM,CAC7B,OAAOG,EAAAA,QAAQ,IAAMJ,EAAU,GAAGC,CAAI,EAAGA,CAAI,CAC/C,CCdA,SAASI,EAAcC,EAAMC,EAAQ,CACnC,OAAI,MAAM,QAAQD,CAAI,EACbA,EAAK,IAAKE,GAASA,IAAS,KAAO,KAAOD,EAAOC,CAAI,CAAC,EAE3DC,EAASH,CAAI,EACR,OAAO,KAAKA,CAAI,EAAE,OAAO,CAACI,EAAQC,KACvCD,EAAOC,CAAG,EAAIJ,EAAOD,EAAKK,CAAG,CAAC,EACvBD,GACN,CAAE,CAAA,EAEHJ,GAAQ,KACHC,EAAOD,CAAI,EAEb,IACT"}