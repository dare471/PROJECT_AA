{"version":3,"file":"chunk-G72KV6MB-0b7bd11b.js","sources":["../../node_modules/.pnpm/@chakra-ui+breakpoint-utils@2.0.8/node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs"],"sourcesContent":["// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n"],"names":["mapResponsive","prop","mapper","item","isObject","result","key"],"mappings":"wCAUA,SAASA,EAAcC,EAAMC,EAAQ,CACnC,OAAI,MAAM,QAAQD,CAAI,EACbA,EAAK,IAAKE,GAASA,IAAS,KAAO,KAAOD,EAAOC,CAAI,CAAC,EAE3DC,EAASH,CAAI,EACR,OAAO,KAAKA,CAAI,EAAE,OAAO,CAACI,EAAQC,KACvCD,EAAOC,CAAG,EAAIJ,EAAOD,EAAKK,CAAG,CAAC,EACvBD,GACN,CAAE,CAAA,EAEHJ,GAAQ,KACHC,EAAOD,CAAI,EAEb,IACT"}